#!/usr/bin/python
"""
Utility to query the builtin macros of gcc or clang.

Supported options:

 -g, --gcc <path>       The binary to use as gcc or clang (default: gcc)
 -h, --help             Display this help message
"""

# Preshell - Interactive C/C++ preprocessor shell
# Copyright (C) 2013, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import subprocess
import getopt

def run(cmd):
  try:
    return subprocess.Popen(
      cmd,
      stderr=subprocess.PIPE,
      stdout=subprocess.PIPE,
      stdin=subprocess.PIPE
    ).communicate(input='')
  except OSError:
    raise Exception('%s: %s' % (' '.join(cmd), sys.exc_info()[1]))

c_escape_map = {
  '\\' : '\\\\',
  '"' : '\\"',
  '\'' : '\\\'',
  '\a' : '\\a',
  '\b' : '\\b',
  '\f' : '\\f',
  '\n' : '\\n',
  '\r' : '\\r',
  '\t' : '\\t',
  '\v' : '\\v'
}

def c_string_escape(c):
  if c_escape_map.has_key(c):
    return c_escape_map[c]
  else:
    return c

def c_string_literal(s):
  return '"' + ''.join([c_string_escape(c) for c in s]) + '"'

def main():
  try:
    opts, args = getopt.getopt(sys.argv[1:], 'hg:', ['help', 'gcc='])
  except getopt.error, msg:
    print msg
    print "Getting help: --help"
    sys.exit(1)

  gcc = 'gcc'

  for o, a in opts:
    if o in('-h', '--help'):
      print __doc__
      sys.exit(0)
    elif o in('-g', '--gcc'):
      gcc = a
  
  try:
    print c_string_literal(run((gcc, '-dM', '-E', '-'))[0])
  except:
    sys.stderr.write('Error: %s\n' % (sys.exc_info()[1]))

if __name__ == '__main__':
  main()


